import puppeteer from 'puppeteer';\nimport { Planogram, Store } from '@prisma/client';\n\ninterface PDFGenerationOptions {\n  format: 'letter' | 'a4' | 'a3' | 'tabloid';\n  orientation: 'portrait' | 'landscape';\n  includeGrid: boolean;\n  includeVMZones: boolean;\n  includeMeasurements: boolean;\n}\n\nexport class PDFService {\n  private static readonly PAGE_SIZES = {\n    letter: { width: '8.5in', height: '11in' },\n    a4: { width: '210mm', height: '297mm' },\n    a3: { width: '297mm', height: '420mm' },\n    tabloid: { width: '11in', height: '17in' }\n  };\n\n  static async generatePlanogramPDF(\n    planogram: Planogram & { store: Store },\n    options: PDFGenerationOptions\n  ): Promise<Buffer> {\n    const browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\n    });\n\n    try {\n      const page = await browser.newPage();\n\n      // Set page size\n      const pageSize = this.PAGE_SIZES[options.format];\n      await page.setViewport({\n        width: options.orientation === 'landscape' ? 1200 : 800,\n        height: options.orientation === 'landscape' ? 800 : 1200\n      });\n\n      // Generate HTML content\n      const html = this.generatePlanogramHTML(planogram, options);\n      await page.setContent(html, { waitUntil: 'networkidle0' });\n\n      // Generate PDF\n      const pdfBuffer = await page.pdf({\n        format: 'a4', // Will be overridden by page size\n        width: pageSize.width,\n        height: pageSize.height,\n        landscape: options.orientation === 'landscape',\n        margin: {\n          top: '0.5in',\n          bottom: '0.5in',\n          left: '0.5in',\n          right: '0.5in'\n        },\n        printBackground: true\n      });\n\n      return pdfBuffer;\n    } finally {\n      await browser.close();\n    }\n  }\n\n  private static generatePlanogramHTML(\n    planogram: Planogram & { store: Store },\n    options: PDFGenerationOptions\n  ): string {\n    const { store } = planogram;\n    const layoutData = planogram.layoutData as any;\n\n    return `\n      <!DOCTYPE html>\n      <html lang=\"en\">\n      <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>${planogram.name} - Planogram</title>\n        <style>\n          * {\n            margin: 0;\n            padding: 0;\n            box-sizing: border-box;\n          }\n\n          body {\n            font-family: 'Arial', sans-serif;\n            font-size: 12px;\n            line-height: 1.4;\n            color: #333;\n          }\n\n          .header {\n            display: flex;\n            justify-content: space-between;\n            align-items: center;\n            padding: 20px 0;\n            border-bottom: 2px solid #2563eb;\n            margin-bottom: 20px;\n          }\n\n          .header h1 {\n            font-size: 24px;\n            color: #2563eb;\n            margin: 0;\n          }\n\n          .header .info {\n            text-align: right;\n          }\n\n          .store-info {\n            display: grid;\n            grid-template-columns: 1fr 1fr;\n            gap: 20px;\n            margin-bottom: 20px;\n            padding: 15px;\n            background: #f8fafc;\n            border-radius: 8px;\n          }\n\n          .planogram-canvas {\n            position: relative;\n            border: 2px solid #2563eb;\n            margin: 20px 0;\n            background: white;\n            ${options.includeGrid ? this.getGridCSS() : ''}\n          }\n\n          .fixture {\n            position: absolute;\n            border: 1px solid #374151;\n            display: flex;\n            align-items: center;\n            justify-content: center;\n            font-size: 10px;\n            font-weight: bold;\n            color: white;\n          }\n\n          .fixture.eye { background-color: #10b981; }\n          .fixture.reach { background-color: #3b82f6; }\n          .fixture.stretch { background-color: #f59e0b; }\n          .fixture.stoop { background-color: #6b7280; }\n\n          .legend {\n            display: grid;\n            grid-template-columns: repeat(4, 1fr);\n            gap: 10px;\n            margin-top: 20px;\n            padding: 15px;\n            background: #f8fafc;\n            border-radius: 8px;\n          }\n\n          .legend-item {\n            display: flex;\n            align-items: center;\n            font-size: 11px;\n          }\n\n          .legend-color {\n            width: 16px;\n            height: 16px;\n            border-radius: 3px;\n            margin-right: 8px;\n          }\n\n          .measurements {\n            margin-top: 15px;\n            padding: 15px;\n            background: #fef3c7;\n            border-radius: 8px;\n          }\n\n          .footer {\n            margin-top: 30px;\n            padding-top: 15px;\n            border-top: 1px solid #e5e7eb;\n            text-align: center;\n            color: #6b7280;\n            font-size: 10px;\n          }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <div>\n            <h1>${planogram.name}</h1>\n            <p>Store: ${store.name}</p>\n          </div>\n          <div class=\"info\">\n            <p><strong>Version:</strong> ${planogram.version}</p>\n            <p><strong>Status:</strong> ${planogram.status}</p>\n            <p><strong>Generated:</strong> ${new Date().toLocaleDateString()}</p>\n          </div>\n        </div>\n\n        <div class=\"store-info\">\n          <div>\n            <h3>Store Information</h3>\n            <p><strong>Dimensions:</strong> ${store.dimensions.width}' Ã— ${store.dimensions.height}'</p>\n            <p><strong>Area:</strong> ${(store.dimensions.width * store.dimensions.height).toFixed(0)} sq ft</p>\n            ${store.address ? `<p><strong>Address:</strong> ${store.address}</p>` : ''}\n          </div>\n          <div>\n            <h3>Planogram Details</h3>\n            <p><strong>Fixtures:</strong> ${layoutData?.fixtures?.length || 0}</p>\n            <p><strong>Created:</strong> ${new Date(planogram.createdAt).toLocaleDateString()}</p>\n            <p><strong>Updated:</strong> ${new Date(planogram.updatedAt).toLocaleDateString()}</p>\n          </div>\n        </div>\n\n        <div class=\"planogram-canvas\" style=\"width: 100%; height: 400px; max-width: 800px; margin: 0 auto;\">\n          ${this.generateFixturesHTML(layoutData?.fixtures || [], store, options)}\n        </div>\n\n        ${options.includeVMZones ? this.generateLegendHTML() : ''}\n        ${options.includeMeasurements ? this.generateMeasurementsHTML(store, layoutData) : ''}\n\n        <div class=\"footer\">\n          <p>Generated by VM Planogram System | ${new Date().toISOString()}</p>\n          <p>This planogram follows industry-standard visual merchandising principles</p>\n        </div>\n      </body>\n      </html>\n    `;\n  }\n\n  private static generateFixturesHTML(\n    fixtures: any[],\n    store: any,\n    options: PDFGenerationOptions\n  ): string {\n    if (!fixtures || fixtures.length === 0) {\n      return '<div style=\"text-align: center; padding: 50px; color: #6b7280;\">No fixtures placed</div>';\n    }\n\n    const scale = 400 / Math.max(store.dimensions.width, store.dimensions.height);\n\n    return fixtures.map(storeFixture => {\n      const fixture = storeFixture.fixture;\n      if (!fixture) return '';\n\n      const x = storeFixture.x * scale;\n      const y = storeFixture.y * scale;\n      const width = fixture.dimensions.width * scale;\n      const height = fixture.dimensions.depth * scale;\n      const rotation = storeFixture.rotation || 0;\n\n      return `\n        <div class=\"fixture ${storeFixture.vmZone.toLowerCase()}\" style=\"\n          left: ${x}px;\n          top: ${y}px;\n          width: ${width}px;\n          height: ${height}px;\n          transform: rotate(${rotation}deg);\n        \">\n          ${fixture.name.substring(0, 10)}\n        </div>\n      `;\n    }).join('');\n  }\n\n  private static generateLegendHTML(): string {\n    return `\n      <div class=\"legend\">\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background-color: #10b981;\"></div>\n          <span>Eye Level (60-72\")</span>\n        </div>\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background-color: #3b82f6;\"></div>\n          <span>Reach Zone (48-60\")</span>\n        </div>\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background-color: #f59e0b;\"></div>\n          <span>Stretch Zone (72+\")</span>\n        </div>\n        <div class=\"legend-item\">\n          <div class=\"legend-color\" style=\"background-color: #6b7280;\"></div>\n          <span>Stoop Zone (0-48\")</span>\n        </div>\n      </div>\n    `;\n  }\n\n  private static generateMeasurementsHTML(store: any, layoutData: any): string {\n    const fixtures = layoutData?.fixtures || [];\n    const totalFixtures = fixtures.length;\n    const zoneDistribution = fixtures.reduce((acc: any, fixture: any) => {\n      acc[fixture.vmZone] = (acc[fixture.vmZone] || 0) + 1;\n      return acc;\n    }, {});\n\n    return `\n      <div class=\"measurements\">\n        <h3>Layout Analysis</h3>\n        <div style=\"display: grid; grid-template-columns: repeat(3, 1fr); gap: 15px; margin-top: 10px;\">\n          <div>\n            <strong>Total Fixtures:</strong> ${totalFixtures}<br>\n            <strong>Store Utilization:</strong> ${((totalFixtures * 10) / (store.dimensions.width * store.dimensions.height) * 100).toFixed(1)}%\n          </div>\n          <div>\n            <strong>VM Zone Distribution:</strong><br>\n            Eye: ${zoneDistribution.EYE || 0} (${totalFixtures ? Math.round((zoneDistribution.EYE || 0) / totalFixtures * 100) : 0}%)<br>\n            Reach: ${zoneDistribution.REACH || 0} (${totalFixtures ? Math.round((zoneDistribution.REACH || 0) / totalFixtures * 100) : 0}%)\n          </div>\n          <div>\n            Stretch: ${zoneDistribution.STRETCH || 0} (${totalFixtures ? Math.round((zoneDistribution.STRETCH || 0) / totalFixtures * 100) : 0}%)<br>\n            Stoop: ${zoneDistribution.STOOP || 0} (${totalFixtures ? Math.round((zoneDistribution.STOOP || 0) / totalFixtures * 100) : 0}%)\n          </div>\n        </div>\n      </div>\n    `;\n  }\n\n  private static getGridCSS(): string {\n    return `\n      background-image:\n        linear-gradient(to right, #f3f4f6 1px, transparent 1px),\n        linear-gradient(to bottom, #f3f4f6 1px, transparent 1px);\n      background-size: 20px 20px;\n    `;\n  }\n\n  static async generatePickListPDF(\n    planogram: Planogram & { store: Store },\n    pickLists: any[]\n  ): Promise<Buffer> {\n    const browser = await puppeteer.launch({\n      headless: true,\n      args: ['--no-sandbox', '--disable-setuid-sandbox']\n    });\n\n    try {\n      const page = await browser.newPage();\n      await page.setViewport({ width: 800, height: 1200 });\n\n      const html = this.generatePickListHTML(planogram, pickLists);\n      await page.setContent(html, { waitUntil: 'networkidle0' });\n\n      return await page.pdf({\n        format: 'letter',\n        margin: {\n          top: '0.5in',\n          bottom: '0.5in',\n          left: '0.5in',\n          right: '0.5in'\n        },\n        printBackground: true\n      });\n    } finally {\n      await browser.close();\n    }\n  }\n\n  private static generatePickListHTML(\n    planogram: Planogram & { store: Store },\n    pickLists: any[]\n  ): string {\n    return `\n      <!DOCTYPE html>\n      <html>\n      <head>\n        <meta charset=\"UTF-8\">\n        <title>Pick Lists - ${planogram.name}</title>\n        <style>\n          body { font-family: Arial, sans-serif; font-size: 12px; }\n          .header { border-bottom: 2px solid #333; padding-bottom: 10px; margin-bottom: 20px; }\n          .pick-list { margin-bottom: 30px; page-break-inside: avoid; }\n          .pick-list h3 { background: #f0f0f0; padding: 10px; margin: 0 0 10px 0; }\n          .pick-item { display: flex; align-items: center; padding: 5px 0; border-bottom: 1px solid #eee; }\n          .checkbox { width: 20px; height: 20px; border: 2px solid #333; margin-right: 10px; }\n          .item-details { flex: 1; }\n          .quantity { font-weight: bold; margin-left: auto; }\n        </style>\n      </head>\n      <body>\n        <div class=\"header\">\n          <h1>Pick Lists - ${planogram.name}</h1>\n          <p>Store: ${planogram.store.name} | Date: ${new Date().toLocaleDateString()}</p>\n        </div>\n        \n        ${pickLists.map(pickList => `\n          <div class=\"pick-list\">\n            <h3>${pickList.name} ${pickList.assignedTo ? `(Assigned to: ${pickList.assignedTo})` : ''}</h3>\n            ${pickList.items.map((item: any) => `\n              <div class=\"pick-item\">\n                <div class=\"checkbox\"></div>\n                <div class=\"item-details\">\n                  <strong>${item.productName}</strong><br>\n                  From: ${item.fromLocation || 'Current'} â†’ To: ${item.toLocation}\n                </div>\n                <div class=\"quantity\">Qty: ${item.quantity}</div>\n              </div>\n            `).join('')}\n          </div>\n        `).join('')}\n      </body>\n      </html>\n    `;\n  }\n}