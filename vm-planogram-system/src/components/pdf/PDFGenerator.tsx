import React, { useState } from 'react';\nimport { Planogram } from '../../types';\nimport { pdfService } from '../../services/pdf.service';\nimport LoadingSpinner from '../ui/LoadingSpinner';\nimport {\n  Download,\n  FileText,\n  Settings,\n  CheckSquare,\n  Grid,\n  Ruler,\n  Eye\n} from 'lucide-react';\n\ninterface PDFGeneratorProps {\n  planogram: Planogram;\n  onClose: () => void;\n}\n\ninterface PDFOptions {\n  format: 'letter' | 'a4' | 'a3' | 'tabloid';\n  orientation: 'portrait' | 'landscape';\n  includeGrid: boolean;\n  includeVMZones: boolean;\n  includeMeasurements: boolean;\n  includePickLists: boolean;\n}\n\nconst PDFGenerator: React.FC<PDFGeneratorProps> = ({ planogram, onClose }) => {\n  const [options, setOptions] = useState<PDFOptions>({\n    format: 'letter',\n    orientation: 'landscape',\n    includeGrid: true,\n    includeVMZones: true,\n    includeMeasurements: true,\n    includePickLists: false\n  });\n  const [generating, setGenerating] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  const handleGeneratePDF = async () => {\n    setGenerating(true);\n    setError(null);\n\n    try {\n      const pdfBlob = await pdfService.generatePlanogramPDF(planogram.id, options);\n      \n      // Create download link\n      const url = window.URL.createObjectURL(pdfBlob);\n      const link = document.createElement('a');\n      link.href = url;\n      link.download = `${planogram.name}-planogram.pdf`;\n      document.body.appendChild(link);\n      link.click();\n      document.body.removeChild(link);\n      window.URL.revokeObjectURL(url);\n\n      onClose();\n    } catch (err: any) {\n      setError(err.message);\n    } finally {\n      setGenerating(false);\n    }\n  };\n\n  const handleOptionChange = (key: keyof PDFOptions, value: any) => {\n    setOptions({\n      ...options,\n      [key]: value\n    });\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center p-4 z-50\">\n      <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-screen overflow-y-auto\">\n        <div className=\"flex items-center justify-between p-6 border-b border-gray-200\">\n          <div className=\"flex items-center\">\n            <FileText className=\"w-6 h-6 text-primary mr-3\" />\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-900\">Generate PDF</h2>\n              <p className=\"text-sm text-gray-500\">{planogram.name}</p>\n            </div>\n          </div>\n          <button\n            onClick={onClose}\n            className=\"p-2 text-gray-400 hover:text-gray-600 rounded\"\n          >\n            ×\n          </button>\n        </div>\n\n        <div className=\"p-6 space-y-6\">\n          {error && (\n            <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n              {error}\n            </div>\n          )}\n\n          {/* PDF Format Options */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium text-gray-900 flex items-center\">\n              <Settings className=\"w-5 h-5 mr-2\" />\n              PDF Options\n            </h3>\n\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"form-label\">Paper Size</label>\n                <select\n                  value={options.format}\n                  onChange={(e) => handleOptionChange('format', e.target.value)}\n                  className=\"input-field w-full\"\n                >\n                  <option value=\"letter\">Letter (8.5\" × 11\")</option>\n                  <option value=\"a4\">A4 (210mm × 297mm)</option>\n                  <option value=\"a3\">A3 (297mm × 420mm)</option>\n                  <option value=\"tabloid\">Tabloid (11\" × 17\")</option>\n                </select>\n              </div>\n\n              <div>\n                <label className=\"form-label\">Orientation</label>\n                <select\n                  value={options.orientation}\n                  onChange={(e) => handleOptionChange('orientation', e.target.value)}\n                  className=\"input-field w-full\"\n                >\n                  <option value=\"portrait\">Portrait</option>\n                  <option value=\"landscape\">Landscape</option>\n                </select>\n              </div>\n            </div>\n          </div>\n\n          {/* Content Options */}\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-medium text-gray-900\">Content Options</h3>\n            \n            <div className=\"space-y-3\">\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={options.includeGrid}\n                  onChange={(e) => handleOptionChange('includeGrid', e.target.checked)}\n                  className=\"mr-3 h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <Grid className=\"w-4 h-4 mr-2 text-gray-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">Include Grid Lines</span>\n              </label>\n\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={options.includeVMZones}\n                  onChange={(e) => handleOptionChange('includeVMZones', e.target.checked)}\n                  className=\"mr-3 h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <Eye className=\"w-4 h-4 mr-2 text-gray-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">Include VM Zone Legend</span>\n              </label>\n\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={options.includeMeasurements}\n                  onChange={(e) => handleOptionChange('includeMeasurements', e.target.checked)}\n                  className=\"mr-3 h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <Ruler className=\"w-4 h-4 mr-2 text-gray-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">Include Measurements & Analysis</span>\n              </label>\n\n              <label className=\"flex items-center\">\n                <input\n                  type=\"checkbox\"\n                  checked={options.includePickLists}\n                  onChange={(e) => handleOptionChange('includePickLists', e.target.checked)}\n                  className=\"mr-3 h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded\"\n                />\n                <CheckSquare className=\"w-4 h-4 mr-2 text-gray-500\" />\n                <span className=\"text-sm font-medium text-gray-700\">Include Pick Lists (Separate Pages)</span>\n              </label>\n            </div>\n          </div>\n\n          {/* Preview Information */}\n          <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\n            <h4 className=\"font-medium text-blue-900 mb-2\">PDF Preview</h4>\n            <div className=\"text-sm text-blue-700 space-y-1\">\n              <p><strong>Format:</strong> {options.format.toUpperCase()} - {options.orientation}</p>\n              <p><strong>Pages:</strong> {options.includePickLists ? '2+' : '1'} (Planogram + {options.includePickLists ? 'Pick Lists' : 'No additional pages'})</p>\n              <p><strong>Features:</strong> \n                {[\n                  options.includeGrid && 'Grid',\n                  options.includeVMZones && 'VM Zones',\n                  options.includeMeasurements && 'Analysis',\n                  options.includePickLists && 'Pick Lists'\n                ].filter(Boolean).join(', ') || 'Basic layout only'}\n              </p>\n            </div>\n          </div>\n        </div>\n\n        {/* Footer Actions */}\n        <div className=\"flex justify-end space-x-3 p-6 border-t border-gray-200\">\n          <button\n            onClick={onClose}\n            className=\"btn-secondary\"\n            disabled={generating}\n          >\n            Cancel\n          </button>\n          <button\n            onClick={handleGeneratePDF}\n            disabled={generating}\n            className=\"btn-primary flex items-center\"\n          >\n            {generating ? (\n              <>\n                <LoadingSpinner size=\"sm\" className=\"mr-2\" />\n                Generating...\n              </>\n            ) : (\n              <>\n                <Download className=\"w-4 h-4 mr-2\" />\n                Generate PDF\n              </>\n            )}\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n};\n\nexport default PDFGenerator;