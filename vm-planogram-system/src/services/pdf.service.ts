import axios from 'axios';\nimport { ApiResponse } from '../types';\n\nconst API_BASE_URL = '/api';\n\ninterface PDFOptions {\n  format: 'letter' | 'a4' | 'a3' | 'tabloid';\n  orientation: 'portrait' | 'landscape';\n  includeGrid: boolean;\n  includeVMZones: boolean;\n  includeMeasurements: boolean;\n  includePickLists: boolean;\n}\n\nclass PDFService {\n  private axiosInstance;\n\n  constructor() {\n    this.axiosInstance = axios.create({\n      baseURL: API_BASE_URL,\n      withCredentials: true,\n      responseType: 'blob',\n    });\n  }\n\n  async generatePlanogramPDF(planogramId: string, options: PDFOptions): Promise<Blob> {\n    try {\n      const response = await this.axiosInstance.get(\n        `/planograms/${planogramId}/pdf`,\n        { params: options }\n      );\n      return new Blob([response.data], { type: 'application/pdf' });\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to generate PDF');\n    }\n  }\n\n  async generatePickListPDF(planogramId: string): Promise<Blob> {\n    try {\n      const response = await this.axiosInstance.get(\n        `/planograms/${planogramId}/picklists/pdf`\n      );\n      return new Blob([response.data], { type: 'application/pdf' });\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to generate pick list PDF');\n    }\n  }\n\n  async generateTaskCardsPDF(planogramId: string): Promise<Blob> {\n    try {\n      const response = await this.axiosInstance.get(\n        `/planograms/${planogramId}/taskcards/pdf`\n      );\n      return new Blob([response.data], { type: 'application/pdf' });\n    } catch (error: any) {\n      throw new Error(error.response?.data?.error || 'Failed to generate task cards PDF');\n    }\n  }\n}\n\nexport const pdfService = new PDFService();