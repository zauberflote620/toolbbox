import { useState, useEffect } from 'react';
import planData from './plan.json';
import { generateNewPlan, analyzeRetailGoals, calculatePerformanceMetrics } from './aiClient';
import ShopResetMonitoring from './monitoring';
import FeedbackCollectionSystem from './feedback-system';
import './App.css';

function App() {
  const [plan, setPlan] = useState(planData);
  const [apiKey, setApiKey] = useState('');
  const [loading, setLoading] = useState(false);
  const [goals, setGoals] = useState('Focus on winter seasonal items and high-margin products');
  const [error, setError] = useState('');
  const [showRecommendations, setShowRecommendations] = useState(false);
  const [performanceMetrics, setPerformanceMetrics] = useState(null);
  const [detectedPatterns, setDetectedPatterns] = useState([]);
  const [showMetrics, setShowMetrics] = useState(false);

  // Initialize monitoring and feedback systems
  useEffect(() => {
    const monitoring = new ShopResetMonitoring();
    const feedback = new FeedbackCollectionSystem();

    // Track page view
    monitoring.recordEvent('app_loaded', { timestamp: new Date().toISOString() });

    // Cleanup on unmount
    return () => {
      monitoring.exportAnalytics();
    };
  }, []);

  // Analyze goals when they change
  useEffect(() => {
    const patterns = analyzeRetailGoals(goals);
    setDetectedPatterns(patterns);
  }, [goals]);

  // Calculate performance metrics when plan changes
  useEffect(() => {
    const metrics = calculatePerformanceMetrics(plan);
    setPerformanceMetrics(metrics);
  }, [plan]);

  const handleRepopulate = async () => {
    setLoading(true);
    setError('');
    try {
      const newPlan = await generateNewPlan(plan, goals, apiKey);
      setPlan(newPlan);
      if (newPlan.vmRecommendations) {
        setShowRecommendations(true);
      }
    } catch (error) {
      console.error('Failed to generate new plan:', error);
      setError('Could not generate a new plan. Please check your goals and try again.');
    }
    setLoading(false);
  };

  const handleExportPlan = () => {
    const exportData = {
      ...plan,
      performanceMetrics,
      detectedPatterns,
      exportedAt: new Date().toISOString()
    };

    const dataStr = JSON.stringify(exportData, null, 2);
    const dataUri = 'data:application/json;charset=utf-8,'+ encodeURIComponent(dataStr);
    const exportFileDefaultName = `shop-plan-${plan.lastUpdated}.json`;

    const linkElement = document.createElement('a');
    linkElement.setAttribute('href', dataUri);
    linkElement.setAttribute('download', exportFileDefaultName);
    linkElement.click();
  };

  const getPriorityColor = (priority) => {
    switch (priority) {
      case 'high': return '#e74c3c';
      case 'medium': return '#f39c12';
      case 'low': return '#2ecc71';
      default: return '#95a5a6';
    }
  };

  const getPriorityIcon = (priority) => {
    switch (priority) {
      case 'high': return '🔴';
      case 'medium': return '🟡';
      case 'low': return '🟢';
      default: return '⚪';
    }
  };

  const getMetricsColor = (value, max = 100) => {
    const percentage = (value / max) * 100;
    if (percentage >= 80) return '#27ae60';
    if (percentage >= 60) return '#f39c12';
    return '#e74c3c';
  };

  return (
    <div style={{ padding: '20px', maxWidth: '1200px', margin: 'auto', fontFamily: 'sans-serif' }}>
      <header style={{ textAlign: 'center', marginBottom: '30px' }}>
        <h1 style={{ fontSize: '2.5rem', color: '#2c3e50' }}>🏪 Shop Reset Kit</h1>
        <p style={{ color: '#7f8c8d', fontSize: '1.1rem' }}>
          Professional Visual Merchandising with Anchor-and-Spokes methodology
        </p>
        <div style={{ background: '#ecf0f1', padding: '15px', borderRadius: '8px', marginTop: '15px' }}>
          <div style={{ display: 'flex', justifyContent: 'space-between', flexWrap: 'wrap', gap: '10px' }}>
            <div><strong>Methodology:</strong> {plan.methodology || 'Anchor-and-Spokes'}</div>
            <div><strong>Generated by:</strong> {plan.generatedBy || 'Original Kit'}</div>
            {plan.scenario && <div><strong>Scenario:</strong> {plan.scenario}</div>}
          </div>
        </div>
      </header>

      {error && (
        <div style={{
          background: '#ffebee',
          color: '#c62828',
          padding: '15px',
          borderRadius: '8px',
          marginBottom: '20px',
          border: '1px solid #ffcdd2'
        }}>
          ⚠️ {error}
        </div>
      )}

      {/* Goal Analysis Panel */}
      {detectedPatterns.length > 0 && (
        <div style={{
          background: '#e3f2fd',
          padding: '20px',
          borderRadius: '12px',
          marginBottom: '20px',
          border: '2px solid #2196f3'
        }}>
          <h3 style={{ color: '#1976d2', marginBottom: '15px' }}>🎯 Goal Analysis</h3>
          <div style={{ display: 'flex', flexWrap: 'wrap', gap: '10px' }}>
            {detectedPatterns.map((pattern, index) => (
              <span key={index} style={{
                background: '#1976d2',
                color: 'white',
                padding: '6px 12px',
                borderRadius: '16px',
                fontSize: '12px',
                fontWeight: 'bold'
              }}>
                {pattern.type.toUpperCase()} ({Math.round(pattern.weight * 100)}%)
              </span>
            ))}
          </div>
        </div>
      )}

      <div style={{
        background: '#fff',
        padding: '25px',
        borderRadius: '12px',
        boxShadow: '0 4px 20px rgba(0,0,0,0.08)',
        marginBottom: '30px'
      }}>
        <h2 style={{ borderBottom: '2px solid #ecf0f1', paddingBottom: '10px', marginBottom: '20px' }}>
          🤖 AI Planning Settings
        </h2>

        <div style={{ marginBottom: '20px' }}>
          <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '8px', color: '#2c3e50' }}>
            Goals for this reset:
          </label>
          <textarea
            value={goals}
            onChange={(e) => setGoals(e.target.value)}
            placeholder="e.g., Focus on winter seasonal items, improve high-margin product visibility, optimize traffic flow"
            style={{
              width: '100%',
              padding: '12px',
              borderRadius: '6px',
              border: '2px solid #ecf0f1',
              fontSize: '14px',
              height: '80px',
              resize: 'vertical'
            }}
          />
          <small style={{ color: '#7f8c8d', marginTop: '5px', display: 'block' }}>
            Try: "winter seasonal", "new arrivals", "high-margin profits", "traffic flow", "safety compliance"
          </small>
        </div>

        <div style={{ marginBottom: '25px' }}>
          <label style={{ display: 'block', fontWeight: 'bold', marginBottom: '8px', color: '#2c3e50' }}>
            Your API Key (Optional):
          </label>
          <input
            type="password"
            value={apiKey}
            onChange={(e) => setApiKey(e.target.value)}
            placeholder="Paste your OpenAI API key here to enable AI suggestions"
            style={{
              width: '100%',
              padding: '12px',
              borderRadius: '6px',
              border: '2px solid #ecf0f1',
              fontSize: '14px'
            }}
          />
          <small style={{ color: '#7f8c8d', marginTop: '5px', display: 'block' }}>
            Without API key, comprehensive scenario-based planning will be used
          </small>
        </div>

        <div style={{ display: 'flex', gap: '15px', alignItems: 'center', flexWrap: 'wrap' }}>
          <button
            onClick={handleRepopulate}
            disabled={loading}
            style={{
              flex: 1,
              minWidth: '200px',
              padding: '15px',
              fontSize: '1rem',
              background: loading ? '#95a5a6' : '#3498db',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: loading ? 'not-allowed' : 'pointer',
              transition: 'all 0.3s ease',
              fontWeight: 'bold'
            }}
          >
            {loading ? '🤖 Analyzing...' : '🤖 Generate Optimized Plan'}
          </button>

          <button
            onClick={handleExportPlan}
            style={{
              padding: '15px 20px',
              fontSize: '1rem',
              background: '#27ae60',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              fontWeight: 'bold'
            }}
          >
            📥 Export Plan
          </button>

          <button
            onClick={() => setShowMetrics(!showMetrics)}
            style={{
              padding: '15px 20px',
              fontSize: '1rem',
              background: '#9b59b6',
              color: 'white',
              border: 'none',
              borderRadius: '8px',
              cursor: 'pointer',
              transition: 'all 0.3s ease',
              fontWeight: 'bold'
            }}
          >
            📊 {showMetrics ? 'Hide' : 'Show'} Metrics
          </button>
        </div>
      </div>

      {/* Performance Metrics Panel */}
      {performanceMetrics && showMetrics && (
        <div style={{
          background: '#f8f9fa',
          padding: '25px',
          borderRadius: '12px',
          marginBottom: '30px',
          border: '2px solid #6c757d'
        }}>
          <h3 style={{ color: '#495057', marginBottom: '20px' }}>📊 Performance Metrics</h3>
          <div style={{
            display: 'grid',
            gridTemplateColumns: 'repeat(auto-fit, minmax(200px, 1fr))',
            gap: '15px'
          }}>
            <div style={{ background: 'white', padding: '15px', borderRadius: '8px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: getMetricsColor(performanceMetrics.anchorCount, 5) }}>
                {performanceMetrics.anchorCount}
              </div>
              <div style={{ color: '#6c757d' }}>Anchor Products</div>
            </div>
            <div style={{ background: 'white', padding: '15px', borderRadius: '8px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: getMetricsColor(performanceMetrics.spokeCount, 10) }}>
                {performanceMetrics.spokeCount}
              </div>
              <div style={{ color: '#6c757d' }}>Spoke Products</div>
            </div>
            <div style={{ background: 'white', padding: '15px', borderRadius: '8px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: getMetricsColor(performanceMetrics.eyeLevelUtilization, 8) }}>
                {performanceMetrics.eyeLevelUtilization}
              </div>
              <div style={{ color: '#6c757d' }}>Eye Level Items</div>
            </div>
            <div style={{ background: 'white', padding: '15px', borderRadius: '8px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: getMetricsColor(performanceMetrics.trafficFlowScore) }}>
                {Math.round(performanceMetrics.trafficFlowScore)}%
              </div>
              <div style={{ color: '#6c757d' }}>Traffic Flow Score</div>
            </div>
            <div style={{ background: 'white', padding: '15px', borderRadius: '8px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: getMetricsColor(performanceMetrics.crossSellOpportunities, 6) }}>
                {performanceMetrics.crossSellOpportunities}
              </div>
              <div style={{ color: '#6c757d' }}>Cross-sell Opportunities</div>
            </div>
            <div style={{ background: 'white', padding: '15px', borderRadius: '8px' }}>
              <div style={{ fontSize: '24px', fontWeight: 'bold', color: getMetricsColor(performanceMetrics.safetyCompliance) }}>
                {performanceMetrics.safetyCompliance}%
              </div>
              <div style={{ color: '#6c757d' }}>Safety Compliance</div>
            </div>
          </div>
        </div>
      )}

      {plan.vmRecommendations && showRecommendations && (
        <div style={{
          background: '#e8f5e8',
          padding: '20px',
          borderRadius: '12px',
          marginBottom: '30px',
          border: '2px solid #27ae60'
        }}>
          <h3 style={{ color: '#27ae60', marginBottom: '15px' }}>💡 VM Recommendations</h3>
          <ul style={{ margin: 0, paddingLeft: '20px' }}>
            {plan.vmRecommendations.map((rec, index) => (
              <li key={index} style={{ marginBottom: '8px', color: '#2c3e50' }}>
                {rec}
              </li>
            ))}
          </ul>
          <button
            onClick={() => setShowRecommendations(false)}
            style={{
              marginTop: '15px',
              padding: '8px 15px',
              background: 'transparent',
              border: '1px solid #27ae60',
              borderRadius: '4px',
              color: '#27ae60',
              cursor: 'pointer'
            }}
          >
            Hide Recommendations
          </button>
        </div>
      )}

      {/* Traffic Flow Information */}
      {plan.trafficFlow && (
        <div style={{
          background: '#fff3cd',
          padding: '20px',
          borderRadius: '12px',
          marginBottom: '30px',
          border: '2px solid #ffc107'
        }}>
          <h3 style={{ color: '#856404', marginBottom: '15px' }}>🚶 Traffic Flow Analysis</h3>
          <div style={{ display: 'grid', gridTemplateColumns: 'repeat(auto-fit, minmax(250px, 1fr))', gap: '15px' }}>
            <div>
              <h4 style={{ color: '#856404', marginBottom: '8px' }}>Primary Path:</h4>
              <p style={{ margin: 0, color: '#212529' }}>{plan.trafficFlow.primaryPath}</p>
            </div>
            {plan.trafficFlow.dwellZones && (
              <div>
                <h4 style={{ color: '#856404', marginBottom: '8px' }}>Dwell Zones:</h4>
                <ul style={{ margin: 0, paddingLeft: '20px' }}>
                  {plan.trafficFlow.dwellZones.map((zone, index) => (
                    <li key={index} style={{ color: '#212529' }}>{zone}</li>
                  ))}
                </ul>
              </div>
            )}
          </div>
        </div>
      )}

      <div>
        <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '20px' }}>
          <h2 style={{ borderBottom: '2px solid #ecf0f1', paddingBottom: '10px', margin: 0 }}>
            📋 Your Shop Plan
          </h2>
          <div style={{ color: '#7f8c8d', fontSize: '14px' }}>
            Last Updated: <strong>{plan.lastUpdated}</strong>
          </div>
        </div>

        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(auto-fit, minmax(350px, 1fr))',
          gap: '25px'
        }}>
          {plan.sections.map((section, index) => (
            <div key={index} style={{
              background: '#f9f9f9',
              padding: '20px',
              borderRadius: '12px',
              border: '2px solid #ecf0f1',
              transition: 'transform 0.2s ease',
            }}
            onMouseEnter={(e) => e.target.style.transform = 'translateY(-2px)'}
            onMouseLeave={(e) => e.target.style.transform = 'translateY(0)'}
            >
              <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '15px' }}>
                <h3 style={{
                  color: '#2980b9',
                  margin: 0,
                  fontSize: '1.3rem',
                }}>
                  📍 {section.name}
                </h3>
                {section.vmZone && (
                  <span style={{
                    background: '#3498db',
                    color: 'white',
                    padding: '4px 8px',
                    borderRadius: '12px',
                    fontSize: '10px',
                    fontWeight: 'bold'
                  }}>
                    {section.vmZone}
                  </span>
                )}
              </div>
              <div style={{ display: 'flex', flexDirection: 'column', gap: '10px' }}>
                {section.items.map((item, itemIndex) => (
                  <div key={itemIndex} style={{
                    background: '#fff',
                    padding: '15px',
                    borderRadius: '8px',
                    boxShadow: '0 2px 8px rgba(0,0,0,0.05)',
                    border: '1px solid #ecf0f1'
                  }}>
                    <div style={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', marginBottom: '8px' }}>
                      <span style={{ fontSize: '14px', fontWeight: '500' }}>
                        {item.name}
                      </span>
                      <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                        <span style={{ fontSize: '16px' }}>
                          {getPriorityIcon(item.priority)}
                        </span>
                        <span style={{
                          padding: '4px 12px',
                          borderRadius: '16px',
                          fontSize: '12px',
                          fontWeight: 'bold',
                          color: 'white',
                          background: getPriorityColor(item.priority),
                          textTransform: 'uppercase'
                        }}>
                          {item.priority}
                        </span>
                      </div>
                    </div>
                    {(item.margin || item.velocity) && (
                      <div style={{ display: 'flex', gap: '15px', fontSize: '12px', color: '#6c757d' }}>
                        {item.margin && <span>Margin: {item.margin}</span>}
                        {item.velocity && <span>Velocity: {item.velocity}</span>}
                      </div>
                    )}
                  </div>
                ))}
              </div>
            </div>
          ))}
        </div>
      </div>

      <footer style={{
        marginTop: '50px',
        padding: '20px',
        background: '#2c3e50',
        color: 'white',
        borderRadius: '12px',
        textAlign: 'center'
      }}>
        <h4 style={{ margin: '0 0 10px 0' }}>🎯 Anchor-and-Spokes Methodology</h4>
        <p style={{ margin: '0', fontSize: '14px', opacity: 0.9 }}>
          Position key anchor products in high-traffic zones, then cluster complementary spoke items around them
          to create natural points of interest and guide customer flow through evidence-based VM principles.
        </p>
      </footer>
    </div>
  );
}

export default App;